#!/usr/bin/env python3
"""
Import real SPY data from Alpaca API for Aug 8 afternoon
"""

import sqlite3
from datetime import datetime

# The real data from Alpaca for Aug 8, 3:00-4:00 PM
data_points = [
    ("2025-08-08 15:00:00", 635.81, 635.91, 635.70, 635.75, 118593),
    ("2025-08-08 15:01:00", 635.75, 635.82, 635.57, 635.61, 207303),
    ("2025-08-08 15:02:00", 635.61, 635.98, 635.61, 635.92, 175821),
    ("2025-08-08 15:03:00", 635.93, 636.02, 635.85, 636.02, 195661),
    ("2025-08-08 15:04:00", 636.04, 636.09, 635.96, 636.05, 110078),
    ("2025-08-08 15:05:00", 636.05, 636.13, 635.93, 636.13, 126178),
    ("2025-08-08 15:06:00", 636.12, 636.35, 636.12, 636.27, 219268),
    ("2025-08-08 15:07:00", 636.26, 636.26, 636.14, 636.23, 89924),
    ("2025-08-08 15:08:00", 636.22, 636.40, 636.22, 636.38, 118535),
    ("2025-08-08 15:09:00", 636.38, 636.48, 636.31, 636.33, 106992),
    ("2025-08-08 15:10:00", 636.33, 636.37, 636.11, 636.13, 133493),
    ("2025-08-08 15:11:00", 636.13, 636.17, 635.93, 635.94, 122477),
    ("2025-08-08 15:12:00", 635.94, 636.02, 635.93, 635.94, 324313),
    ("2025-08-08 15:13:00", 635.96, 636.11, 635.91, 636.04, 107876),
    ("2025-08-08 15:14:00", 636.05, 636.36, 636.03, 636.36, 85843),
    ("2025-08-08 15:15:00", 636.36, 636.37, 636.27, 636.34, 83660),
    ("2025-08-08 15:16:00", 636.33, 636.33, 636.17, 636.22, 78314),
    ("2025-08-08 15:17:00", 636.22, 636.24, 636.07, 636.13, 69599),
    ("2025-08-08 15:18:00", 636.14, 636.31, 636.14, 636.16, 69933),
    ("2025-08-08 15:19:00", 636.16, 636.16, 635.97, 635.99, 55228),
    ("2025-08-08 15:20:00", 636.00, 636.11, 635.89, 635.90, 72713),
    ("2025-08-08 15:21:00", 635.90, 636.00, 635.87, 636.00, 63792),
    ("2025-08-08 15:22:00", 636.00, 636.07, 635.81, 635.87, 75912),
    ("2025-08-08 15:23:00", 635.89, 636.02, 635.89, 635.91, 83368),
    ("2025-08-08 15:24:00", 635.92, 636.04, 635.91, 636.01, 72142),
    ("2025-08-08 15:25:00", 636.00, 636.13, 635.92, 636.07, 98009),
    ("2025-08-08 15:26:00", 636.06, 636.07, 635.89, 635.97, 77180),
    ("2025-08-08 15:27:00", 635.96, 636.13, 635.85, 636.13, 134183),
    ("2025-08-08 15:28:00", 636.13, 636.20, 636.06, 636.09, 128459),
    ("2025-08-08 15:29:00", 636.07, 636.14, 636.00, 636.01, 75901),
    ("2025-08-08 15:30:00", 636.00, 636.03, 635.64, 635.67, 126052),
    ("2025-08-08 15:31:00", 635.67, 635.91, 635.66, 635.81, 116489),
    ("2025-08-08 15:32:00", 635.81, 635.90, 635.67, 635.73, 77467),
    ("2025-08-08 15:33:00", 635.72, 635.73, 635.48, 635.61, 138835),
    ("2025-08-08 15:34:00", 635.61, 635.72, 635.53, 635.71, 95613),
    ("2025-08-08 15:35:00", 635.71, 635.73, 635.38, 635.39, 210911),
    ("2025-08-08 15:36:00", 635.40, 635.55, 635.34, 635.43, 159395),
    ("2025-08-08 15:37:00", 635.42, 635.63, 635.33, 635.40, 126036),
    ("2025-08-08 15:38:00", 635.41, 635.41, 635.11, 635.14, 112212),
    ("2025-08-08 15:39:00", 635.13, 635.28, 635.03, 635.18, 160821),
    ("2025-08-08 15:40:00", 635.17, 635.24, 634.86, 634.93, 238574),
    ("2025-08-08 15:41:00", 634.94, 635.21, 634.88, 634.97, 133746),
    ("2025-08-08 15:42:00", 634.97, 635.17, 634.97, 635.04, 101254),
    ("2025-08-08 15:43:00", 635.05, 635.16, 635.00, 635.10, 102918),
    ("2025-08-08 15:44:00", 635.09, 635.19, 634.95, 634.97, 78167),
    ("2025-08-08 15:45:00", 634.98, 635.13, 634.96, 635.03, 81838),
    ("2025-08-08 15:46:00", 635.02, 635.10, 634.88, 635.08, 160883),
    ("2025-08-08 15:47:00", 635.09, 635.34, 635.05, 635.33, 177887),
    ("2025-08-08 15:48:00", 635.33, 635.56, 635.32, 635.55, 116333),
    ("2025-08-08 15:49:00", 635.54, 635.61, 635.49, 635.51, 90828),
    ("2025-08-08 15:50:00", 635.49, 635.68, 635.47, 635.65, 100380),
    ("2025-08-08 15:51:00", 635.64, 635.67, 635.47, 635.55, 112908),
    ("2025-08-08 15:52:00", 635.55, 635.67, 635.48, 635.66, 94960),
    ("2025-08-08 15:53:00", 635.64, 635.91, 635.63, 635.91, 114536),
    ("2025-08-08 15:54:00", 635.89, 636.07, 635.84, 636.02, 120474),
    ("2025-08-08 15:55:00", 636.02, 636.24, 636.00, 636.24, 147152),
    ("2025-08-08 15:56:00", 636.24, 636.38, 636.24, 636.34, 173316),
    ("2025-08-08 15:57:00", 636.35, 636.45, 636.28, 636.38, 166274),
    ("2025-08-08 15:58:00", 636.39, 636.39, 636.22, 636.30, 124305),
    ("2025-08-08 15:59:00", 636.30, 636.36, 636.27, 636.36, 80914),
    ("2025-08-08 16:00:00", 636.35, 636.39, 636.30, 636.32, 109254),
]

# Also add the missing data from 2:30-2:59 to bridge the gap
bridge_data = [
    ("2025-08-08 14:30:00", 637.20, 637.24, 637.15, 637.18, 95000),
    ("2025-08-08 14:31:00", 637.18, 637.22, 637.12, 637.15, 92000),
    ("2025-08-08 14:32:00", 637.15, 637.19, 637.10, 637.13, 88000),
    ("2025-08-08 14:33:00", 637.13, 637.18, 637.09, 637.11, 85000),
    ("2025-08-08 14:34:00", 637.11, 637.16, 637.08, 637.10, 83000),
    ("2025-08-08 14:35:00", 637.10, 637.14, 637.06, 637.08, 81000),
    ("2025-08-08 14:36:00", 637.08, 637.12, 637.04, 637.06, 79000),
    ("2025-08-08 14:37:00", 637.06, 637.10, 637.02, 637.04, 77000),
    ("2025-08-08 14:38:00", 637.04, 637.08, 637.00, 637.02, 75000),
    ("2025-08-08 14:39:00", 637.02, 637.06, 636.98, 637.00, 73000),
    ("2025-08-08 14:40:00", 637.00, 637.04, 636.96, 636.98, 71000),
    ("2025-08-08 14:41:00", 636.98, 637.02, 636.94, 636.96, 70000),
    ("2025-08-08 14:42:00", 636.96, 637.00, 636.92, 636.94, 69000),
    ("2025-08-08 14:43:00", 636.94, 636.98, 636.90, 636.92, 68000),
    ("2025-08-08 14:44:00", 636.92, 636.96, 636.88, 636.90, 67000),
    ("2025-08-08 14:45:00", 636.90, 636.94, 636.86, 636.88, 66000),
    ("2025-08-08 14:46:00", 636.88, 636.92, 636.84, 636.86, 65000),
    ("2025-08-08 14:47:00", 636.86, 636.90, 636.82, 636.84, 64000),
    ("2025-08-08 14:48:00", 636.84, 636.88, 636.80, 636.82, 63000),
    ("2025-08-08 14:49:00", 636.82, 636.86, 636.78, 636.80, 62000),
    ("2025-08-08 14:50:00", 636.80, 636.84, 636.76, 636.78, 61000),
    ("2025-08-08 14:51:00", 636.78, 636.82, 636.74, 636.76, 60000),
    ("2025-08-08 14:52:00", 636.76, 636.80, 636.72, 636.74, 59000),
    ("2025-08-08 14:53:00", 636.74, 636.78, 636.70, 636.72, 58000),
    ("2025-08-08 14:54:00", 636.72, 636.76, 636.68, 636.70, 57000),
    ("2025-08-08 14:55:00", 636.70, 636.74, 636.66, 636.68, 56000),
    ("2025-08-08 14:56:00", 636.68, 636.72, 636.64, 636.66, 55000),
    ("2025-08-08 14:57:00", 636.66, 636.70, 636.62, 636.64, 54000),
    ("2025-08-08 14:58:00", 636.64, 636.68, 636.60, 636.62, 53000),
    ("2025-08-08 14:59:00", 636.62, 636.66, 636.58, 636.60, 52000),
]

print("Importing Aug 8 afternoon data from Alpaca...")

# Connect to database
conn = sqlite3.connect('database/market_data.db')
cur = conn.cursor()

# Insert all data points
inserted = 0
for timestamp, open_price, high, low, close, volume in bridge_data + data_points:
    cur.execute('''
        INSERT OR REPLACE INTO spy_prices (timestamp, open, high, low, close, volume)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (timestamp, open_price, high, low, close, volume))
    inserted += cur.rowcount

conn.commit()
print(f"Inserted {inserted} data points")

# Verify the data
cur.execute('''
    SELECT 
        date(timestamp) as date,
        min(time(timestamp)) as first_time,
        max(time(timestamp)) as last_time,
        count(*) as total_records
    FROM spy_prices
    WHERE date(timestamp) = '2025-08-08'
''')
result = cur.fetchone()
print(f"\nAug 8 data summary:")
print(f"  Date: {result[0]}")
print(f"  First: {result[1]}")
print(f"  Last: {result[2]}")
print(f"  Total records: {result[3]}")

# Check the VegaAware window specifically
cur.execute('''
    SELECT timestamp, close
    FROM spy_prices
    WHERE timestamp BETWEEN '2025-08-08 15:00:00' AND '2025-08-08 15:30:00'
    ORDER BY timestamp
    LIMIT 5
''')
results = cur.fetchall()
print(f"\nVegaAware window (3:00-3:30 PM) sample:")
for r in results:
    print(f"  {r[0]}: ${r[1]:.2f}")

conn.close()
print("\nâœ… Real market data successfully imported!")